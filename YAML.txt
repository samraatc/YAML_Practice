# YAML = YAML Ainâ€™t Markup Language

# Human-readable data serialization format (like JSON but cleaner).

# Used for configuration files.

# ðŸ‘‰ Basic Rules:

# .yml or .yaml extension

# Case-sensitive

# Uses indentation (spaces, not tabs!)

# Key-value pairs: key: value

# Lists: - item

# Dictionaries: { key: value }



# YAML Basics
# Example 1: Key-Value

name: Bishnu
role: DevOps Engineer
skills: YAML
# Example 2: List
projects:
  - name: Project A
    duration: 3 months
  - name: Project B
    duration: 6 months
  - name: Project C
    duration: 1 year
# Example 3: Dictionary
project_test:
  e-commerce:
    platform: Shopify
    duration: 6 months
  marketing_website:
    platform: WordPress
    duration: 3 months
  mobile_app:
    platform: React Native
    duration: 1 year


#Data Types in YAML
#string

user_name: "Bishnu"

#number
user_age: 30
port: 3000

#boolean
is_active: true
enable: false

#null
user_location: null



# Anchors & Aliases (Reusability)

# YAML lets you reuse configs with & (anchor) and * (alias).

defaults: &default_settings
  retries: 3
  timeout: 30

service1:
  <<: *default_settings
  url: http://service1.com

service2:
  <<: *default_settings
  url: http://service2.com



Multi-line Strings

description: |
  This is a multi-line string.
  Used for long messages.


or we can use


description: >
  This will join
  multiple lines
  into one single line.



if working with particular directory

name: Frontend Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client





Note:- "uses" is used for github action and "runs" is used for Linux 



more details on 


1. Workflow

2. Events (Triggers)

3. Jobs

4. Steps

5. Actions




1. Workflow

A workflow is an automation pipeline defined in a YAML file.

It lives in .github/workflows/.

One repository can have multiple workflows (e.g. ci.yml, deploy.yml).

ðŸ‘‰ Example:

name: CI Workflow   # workflow name
on: [push, pull_request]  # triggers/ Events at which workflow take action

jobs:     # job inside workflow
  build:   # job name inside workflow

    runs-on: ubuntu-latest   #environments set-up in which the workflow run

    steps:     # statements or exuction parts inside the jobs which exucted inside the environment set-up
      - name: Print a message
        run: echo "Running workflow..."




2. Events (Triggers)

Events tell when a workflow should run.

Common events:

push â†’ When code is pushed.

pull_request â†’ On PR creation/update.

schedule â†’ Cron jobs (timed runs).

workflow_dispatch â†’ Manual trigger.

ðŸ‘‰ Example:


on:
  push:
    branches: [ main ]   # run only when code is pushed to main
  pull_request:
    branches: [ develop ]
  schedule:
    - cron: "0 0 * * *"  # every day at midnight/ time set-up to exucte the ci / cd pipeline
  workflow_dispatch:      # manual run button

\



3. Jobs

A job is a group of steps.

Jobs run in parallel by default (can depend on each other).

Each job runs on a runner (like ubuntu-latest, windows-latest).

ðŸ‘‰ Example with multiple jobs:



jobs:
  frontend:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Building frontend"

  backend:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Testing backend"

  deploy:
    runs-on: ubuntu-latest
    needs: [frontend, backend]   # run only after frontend & backend finish
    steps:
      - run: echo "Deploying app..."





4. Steps

Steps are the tasks inside a job.

They run sequentially inside the same job.

A step can run a shell command (run:) or use an action (uses:).

ðŸ‘‰ Example:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3  # action
      - name: Install Dependencies
        run: npm install            # command
      - name: Run Tests
        run: npm test




5. Actions

Reusable code packages for steps.

Can be created by GitHub or the community.

Examples:

actions/checkout â†’ Clones repo

actions/setup-node â†’ Setup Node.js

docker/login-action â†’ Login to DockerHub

ðŸ‘‰ Example:



steps:
  - name: Checkout Repository
    uses: actions/checkout@v3  # Action

  - name: Setup Node.js
    uses: actions/setup-node@v4
    with:
      node-version: 18



