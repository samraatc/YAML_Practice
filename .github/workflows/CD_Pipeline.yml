name: "CD Pipeline"

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]
  workflow_dispatch:

jobs:
  deploy:
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'push'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Workflow_Practice

    steps:
      - name: Download artifact from CI
        uses: actions/github-script@v7
        with:
          script: |
            // Get artifacts from the triggering workflow run
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });
            
            // Find the build artifact
            const buildArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === 'build-artifact'
            );
            
            if (!buildArtifact) {
              throw new Error('Build artifact not found');
            }
            
            // Download the artifact
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: buildArtifact.id,
              archive_format: 'zip',
            });
            
            // Extract the zip file
            const fs = require('fs');
            const path = require('path');
            fs.writeFileSync('/tmp/artifact.zip', Buffer.from(download.data));
            
            // Extract to working directory
            const extract = require('extract-zip');
            await extract('/tmp/artifact.zip', { dir: path.join(process.env.GITHUB_WORKSPACE, 'Workflow_Practice') });

      - name: Verify downloaded files
        run: ls -la Workflow_Practice/

      - name: Deploy to server
        run: echo "ðŸš€ Deploying application..."








# name: "CD Pipeline"

# on:
#   workflow_run:
#     workflows: ["CI pipeline"]   # Triggered only after CI pipeline finishes
#     types:
#       - completed
#     workflow_dispatch:    # Allow manual triggering of the workflow

# jobs:
#   deploy:
#     if: ${{ github.event.workflow_run.conclusion == 'success' }} # run only if CI succeeds
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: Workflow_Practice    # Set the working directory if all files are present inside the directory
#     steps:

#       - name: "Checkout code"
#         uses: actions/checkout@v4

#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: "21"

#       - name: "list files"
#         run: ls -la

#       - name: Install dependencies
#         run: npm install

#       - name: Download Artifact from CI
#         uses: actions/download-artifact@v4
#         with:
#           name: build
#           run-id: ${{ github.event.workflow_run.id }}
#           github-token: ${{ secrets.token }}

#       # - name: List files after download
#       #   run: ls -la 

#       - name: Deploy to Server
#         run: |
#           echo "ðŸš€ Deploying application..."
#           # Example deployment steps:
#           # scp -r ./dist user@server:/var/www/app
#           # ssh user@server "systemctl restart nginx"



#CD pipeline to deploy to Vercel

# name: "CD pipelie"

# no:
#   workflow_run:
#     types:
#       - completed

#   workflow_dispatch:

# jobs:
#   Deploy_CD:
#     runs-on: ubuntu-latest
#     steps:
#       - name: "Checkout"
#         uses: actions/checkout@v4

#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with: 
#           node-version: "21"

#       - name: Install dependencies
#         run: npm install



#       - name: "vercel set-up"
#         uses: npm install -g vercel

#       - name: "download build artifacts"
#         uses: actions/download-artifact@v4
#         with:
#           name: build
#           run-id: ${{ github.event.workflow_run.id }}
#           github-token: ${{ secrets.token }}

#       - name: "Deploy to production"
#         run: vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --confirm --name=CI_CD_test